{"ast":null,"code":"var _jsxFileName = \"C:\\\\curso react 2\\\\ecommerce-ngelabert\\\\src\\\\context\\\\CartContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nimport { animals } from '../components/utils/promises';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCartContext = () => {\n  _s();\n\n  return useContext(CartContext);\n};\n\n_s(useCartContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction CartContextProvider({\n  children\n}) {\n  _s2();\n\n  const [cart, setCart] = useState([]);\n\n  const isInCart = id => {\n    return cart.find(element => element.id === id);\n  };\n\n  const addItem = (item, qty) => {\n    if (isInCart(item.id)) {\n      const updateCart = [...cart];\n      updateCart.forEach(element => {\n        if (element.id === item.id) {\n          element.qty += qty;\n        }\n      });\n      setCart(updateCart);\n    } else {\n      setCart([...cart, {\n        item,\n        qty\n      }]);\n    }\n  };\n\n  console.log(cart);\n\n  function removeItem(item) {\n    for (let i = 0; i < cart.length; i++) {\n      function borrar(array, value) {\n        return array.filter(function (item) {\n          return item !== value;\n        });\n      }\n\n      if (cart[i].id === item) {\n        let result = borrar(cart, cart[i]);\n        setCart(result);\n      }\n    }\n\n    return true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addItem,\n      removeItem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(CartContextProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n\n_c = CartContextProvider;\nexport default CartContextProvider; // export const CartContextProvider = ({children}) => {\n//     \n//     const removeItem = (itemId) =>{\n//         const cartFilter = cart.filter(element => element.item.id !== itemId)\n//         return setCart(cartFilter) \n//     }\n//     const clearCart = () => setCart([])\n//     return(\n//         <CartContext.Provider value={{addItem, isInCart, clearCart, removeItem, cart}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["C:/curso react 2/ecommerce-ngelabert/src/context/CartContext.jsx"],"names":["createContext","useState","useContext","animals","CartContext","useCartContext","CartContextProvider","children","cart","setCart","isInCart","id","find","element","addItem","item","qty","updateCart","forEach","console","log","removeItem","i","length","borrar","array","value","filter","result"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,UAAlC,QAAoD,OAApD;AACA,SAASC,OAAT,QAAwB,8BAAxB;;AACA,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEA,OAAO,MAAMK,cAAc,GAAG;AAAA;;AAAA,SAAMH,UAAU,CAACE,WAAD,CAAhB;AAAA,CAAvB;;GAAMC,c;;AAEb,SAASC,mBAAT,CAA6B;AAACC,EAAAA;AAAD,CAA7B,EAAwC;AAAA;;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMS,QAAQ,GAAIC,EAAD,IAAQ;AACrB,WAAOH,IAAI,CAACI,IAAL,CAAUC,OAAO,IAAIA,OAAO,CAACF,EAAR,KAAeA,EAApC,CAAP;AACH,GAFD;;AAIA,QAAMG,OAAO,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC3B,QAAGN,QAAQ,CAACK,IAAI,CAACJ,EAAN,CAAX,EAAqB;AACjB,YAAMM,UAAU,GAAG,CAAC,GAAGT,IAAJ,CAAnB;AACAS,MAAAA,UAAU,CAACC,OAAX,CAAoBL,OAAD,IAAW;AAC1B,YAAGA,OAAO,CAACF,EAAR,KAAeI,IAAI,CAACJ,EAAvB,EAA0B;AACtBE,UAAAA,OAAO,CAACG,GAAR,IAAeA,GAAf;AACH;AACJ,OAJD;AAKAP,MAAAA,OAAO,CAACQ,UAAD,CAAP;AACH,KARD,MAQK;AACLR,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU;AAACO,QAAAA,IAAD;AAAOC,QAAAA;AAAP,OAAV,CAAD,CAAP;AACC;AACJ,GAZD;;AAaAG,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;;AAEA,WAASa,UAAT,CAAoBN,IAApB,EAAyB;AACrB,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACe,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACjC,eAASE,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA6B;AACzB,eAAOD,KAAK,CAACE,MAAN,CAAa,UAASZ,IAAT,EAAc;AAC9B,iBAAOA,IAAI,KAAKW,KAAhB;AACH,SAFM,CAAP;AAGH;;AACL,UAAKlB,IAAI,CAACc,CAAD,CAAJ,CAAQX,EAAR,KAAeI,IAApB,EAAyB;AACrB,YAAIa,MAAM,GAAGJ,MAAM,CAAChB,IAAD,EAAOA,IAAI,CAACc,CAAD,CAAX,CAAnB;AACAb,QAAAA,OAAO,CAACmB,MAAD,CAAP;AACH;AACA;;AACD,WAAO,IAAP;AACH;;AAED,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACpB,MAAAA,IAAD;AAAOM,MAAAA,OAAP;AAAgBO,MAAAA;AAAhB,KAA7B;AAAA,cACKd;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IA1CQD,mB;;KAAAA,mB;AA4CT,eAAeA,mBAAf,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createContext, useState, useContext } from 'react'\r\nimport { animals } from '../components/utils/promises';\r\nconst CartContext = createContext()\r\n\r\nexport const useCartContext = () => useContext(CartContext);\r\n\r\nfunction CartContextProvider({children}){\r\n    const [cart, setCart] = useState([])\r\n\r\n    const isInCart = (id) => {\r\n        return cart.find(element => element.id === id)\r\n    }\r\n\r\n    const addItem = (item, qty) => {\r\n        if(isInCart(item.id)){\r\n            const updateCart = [...cart];\r\n            updateCart.forEach((element)=>{\r\n                if(element.id === item.id){\r\n                    element.qty += qty\r\n                }\r\n            })\r\n            setCart(updateCart)\r\n        }else{\r\n        setCart([...cart, {item, qty}])\r\n        }\r\n    }\r\n    console.log(cart)\r\n    \r\n    function removeItem(item){\r\n        for( let i = 0; i < cart.length; i++){\r\n            function borrar(array, value){\r\n                return array.filter(function(item){\r\n                    return item !== value;\r\n                })\r\n            }\r\n        if ( cart[i].id === item){\r\n            let result = borrar(cart, cart[i]);\r\n            setCart(result)\r\n        }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return(\r\n        <CartContext.Provider value={{cart, addItem, removeItem}}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CartContextProvider\r\n\r\n// export const CartContextProvider = ({children}) => {\r\n\r\n//     \r\n\r\n//     const removeItem = (itemId) =>{\r\n//         const cartFilter = cart.filter(element => element.item.id !== itemId)\r\n//         return setCart(cartFilter) \r\n//     }\r\n\r\n//     const clearCart = () => setCart([])\r\n\r\n//     return(\r\n//         <CartContext.Provider value={{addItem, isInCart, clearCart, removeItem, cart}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}